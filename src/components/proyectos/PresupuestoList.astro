---
import "../../styles/global.css";
import { supabase } from "../../lib/supabase/SupabaseClient";
import PresupuestoListItem from "./PresupuestoListItem.astro";
import { useState } from "preact/hooks";

let presupuestos = [];
let error = "";
let editing = null;
let editValue = "";

try {
  const { data, error: err } = await supabase
    .from("presupuesto_cc")
    .select("cc, presupuesto")
    .order("cc", { ascending: true });
  if (err) throw err;
  presupuestos = data ?? [];
} catch (e) {
  error = "Error cargando presupuestos.";
}

async function handleDelete(cc) {
  await supabase.from("presupuesto_cc").delete().eq("cc", cc);
  location.reload();
}

function handleEdit(cc, presupuesto) {
  editing = cc;
  editValue = presupuesto;
}

async function handleEditSubmit(e) {
  e.preventDefault();
  await supabase
    .from("presupuesto_cc")
    .upsert(
      { cc: editing, presupuesto: Number(editValue) },
      { onConflict: ["cc"] }
    );
  editing = null;
  editValue = "";
  location.reload();
}
---

<div class="max-w-md mx-auto mt-8 bg-white p-6 rounded-xl shadow border">
  <h2 class="text-lg font-bold mb-4 text-blue-700">Presupuestos asignados</h2>
  {
    error ? (
      <div class="text-red-600">{error}</div>
    ) : presupuestos.length === 0 ? (
      <div class="text-gray-500">No hay presupuestos asignados.</div>
    ) : (
      <table class="w-full text-sm border">
        <thead>
          <tr class="bg-blue-100">
            <th class="p-2 border-b text-left">Centro de Costo</th>
            <th class="p-2 border-b text-right">Presupuesto (S/)</th>
            <th class="p-2 border-b text-center">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {presupuestos.map((p) =>
            editing === p.cc ? (
              <tr>
                <td class="p-2 border-b">{p.cc}</td>
                <td class="p-2 border-b text-right">
                  <form
                    onSubmit={handleEditSubmit}
                    class="flex gap-2 items-center justify-end"
                  >
                    <input
                      type="number"
                      min="0"
                      step="0.01"
                      class="border rounded px-2 py-1 w-24"
                      value={editValue}
                      onInput={(e) => (editValue = e.target.value)}
                      required
                    />
                    <button
                      type="submit"
                      class="text-green-600 hover:underline"
                    >
                      Guardar
                    </button>
                    <button
                      type="button"
                      class="text-gray-500 hover:underline"
                      onClick={() => {
                        editing = null;
                        editValue = "";
                      }}
                    >
                      Cancelar
                    </button>
                  </form>
                </td>
                <td class="p-2 border-b text-center" />
              </tr>
            ) : (
              <PresupuestoListItem
                cc={p.cc}
                presupuesto={p.presupuesto}
                onDelete={handleDelete}
                onEdit={handleEdit}
              />
            )
          )}
        </tbody>
      </table>
    )
  }
</div>
