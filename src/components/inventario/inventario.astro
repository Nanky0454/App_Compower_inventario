---
import "../../styles/global.css";
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import { supabase } from "../../lib/supabase/SupabaseClient";

const { modo = "nuevo", valoresIniciales = {}, categorias = [], unidades = [], onSubmit } = Astro.props;
let categoria = valoresIniciales.categoria ?? "";
let unid_med = valoresIniciales.unid_med ?? "";
let nuevaCategoria = "";
let nuevaUnidad = "";

import {
  listInventario,
  money,
  subtotal,
  type Tipo,
  type Sede,
} from "../../pages/api/inventario/get.ts";

const tipo = (Astro.url.searchParams.get("tipo") ?? "activo") as Tipo;
const sede = (Astro.url.searchParams.get("sede") ?? "surco") as Sede;
const page = Number(Astro.url.searchParams.get("page") ?? 1);
const pageSize = 15;
const search = Astro.url.searchParams.get("search")?.toLowerCase() ?? "";
const searchBy = Astro.url.searchParams.get("searchBy") ?? "nombre";

const categoriaFiltro = Astro.url.searchParams.get("categoria") ?? "";
// Ordenamiento
const sortBy = Astro.url.searchParams.get("sortBy") ?? "";
const sortDir = Astro.url.searchParams.get("sortDir") ?? "desc"; // default descendente

let rows: any[] = [];
try {
  rows = await listInventario({ tipo, sede });
} catch (e) {
  console.error(e);
  rows = [];
}



// Normalizar categorías vacías
rows = rows.map(r => ({ ...r, categoria: r.categoria?.trim() || "sin categoria" }));

// Obtener centros de costo desde Supabase
let centrosCostos: { id: number; codigo: string; proyecto: string }[] = [];
try {
  const { data, error } = await supabase
    .from("centro_costo")
    .select("id, codigo, proyecto")
    .order("codigo", { ascending: true });
  if (error) throw error;
  centrosCostos = data ?? [];
} catch (e) {
  console.error("Error cargando centros de costo:", e);
  centrosCostos = [];
}
// Obtener sitios desde Supabase
let sites: { id: number; nombre: string; cc_origen: string}[] = [];
try {
  const { data, error } = await supabase
    .from("site")
    .select("id, nombre, cc_origen")
    
    .order("id", { ascending: true });
  if (error) throw error;
  sites = data ?? [];
} catch (e) {
  console.error("Error cargando sitios:", e);
  sites = [];
}

// Obtener nombres únicos de sitios
const nombresUnicos = Array.from(new Set(sites.map(s => s.nombre || "nombre desconocido")));

const sitesConVariosCC = Array.from(
  new Set(
    sites
      .filter((site, _, arr) =>
        arr.filter(s => s.nombre === site.nombre)
           .map(s => s.cc_origen)
           .filter((cc, i, a) => a.indexOf(cc) === i).length > 1
      )
      .map(site => site.nombre)
  )
);

// Filtrar por búsqueda
let filteredRows = rows;
if (search) {
  filteredRows = filteredRows.filter(r => {
    if (searchBy === "codigo") return (r.codigo || "").toLowerCase().includes(search);
    return (r.nombre || "").toLowerCase().includes(search);
  });
}

// Filtrar por categoría
if (categoriaFiltro) {
  filteredRows = filteredRows.filter(r => (r.categoria || "sin categoria") === categoriaFiltro);
}

// ORDENAMIENTO
if (["cantidad", "valor_unitario", "subtotal"].includes(sortBy)) {
  filteredRows = filteredRows.slice().sort((a, b) => {
    let aValue = 0, bValue = 0;
    if (sortBy === "cantidad") {
      aValue = Number(a.cantidad ?? 0);
      bValue = Number(b.cantidad ?? 0);
    } else if (sortBy === "valor_unitario") {
      aValue = Number(a.valor_unitario ?? 0);
      bValue = Number(b.valor_unitario ?? 0);
    } else if (sortBy === "subtotal") {
      aValue = subtotal(a) ?? 0;
      bValue = subtotal(b) ?? 0;
    }
    if (sortDir === "asc") return aValue - bValue;
    return bValue - aValue;
  });
}

// Obtener categorías únicas para el filtro
const categoriasUnicas = Array.from(new Set(rows.map(r => r.categoria || "sin categoria")));

const totalRows = filteredRows.length;
const totalPages = Math.ceil(totalRows / pageSize);
const paginatedRows = filteredRows.slice((page - 1) * pageSize, page * pageSize);
const role = Astro.cookies.get('sb-role')?.value ?? '';
// Calcular el subtotal total por tipo (no por búsqueda)
const totalSubtotalPorTipo = rows.reduce((acc, r) => acc + subtotal(r), 0);
---

<div class="mb-4 flex flex-col md:flex-row md:items-center md:gap-4 gap-2">
  <div class="mb-2 text-sm text-green-700 font-semibold">
    Subtotal total ({tipo}): {money(totalSubtotalPorTipo)}
  </div>
  <div class="mb-2 text-sm text-gray-700 font-semibold">
    Total de items: {totalRows}
</div>
  <div class="flex gap-2">
    {(["activo","material", "herramienta"] as Tipo[]).map((t) => (
      <a
        href={`?tipo=${t}&sede=${sede}`}
        class={`px-3 py-1 rounded border ${t === tipo ? "bg-slate-900 text-white" : "bg-white hover:bg-slate-50"}`}
      >
        {t[0].toUpperCase() + t.slice(1)}
      </a>
    ))}
  </div>
  <div class="flex gap-2 items-center w-full">
    <form method="get" class="flex gap-2 flex-wrap items-center flex-grow">
      <input type="hidden" name="tipo" value={tipo} />
      <input type="hidden" name="sede" value={sede} />
      <input type="hidden" name="page" value={1} />
      <input
        type="text"
        name="search"
        value={search}
        placeholder="Buscar..."
        class="border rounded px-2 py-1"
      />
      <select name="searchBy" class="border rounded px-2 py-1">
        <option value="nombre" selected={searchBy === "nombre"}>Nombre</option>
        <option value="codigo" selected={searchBy === "codigo"}>Código</option>
      </select>
      <select name="categoria" class="border rounded px-2 py-1">
        <option value="">Todas las categorías</option>
        {categoriasUnicas.map(cat => (
          <option value={cat} selected={categoriaFiltro === cat}>{cat}</option>
        ))}
      </select>
  <button type="submit" class="px-3 py-1 bg-blue-600 text-white rounded">Filtrar</button>
  <a href={`?tipo=${tipo}&sede=${sede}`} class="px-3 py-1 bg-gray-200 text-gray-700 rounded border border-gray-400 hover:bg-gray-300 ml-2">Quitar filtros</a>
    </form>
    <button type="submit" class="px-3 py-1 bg-green-400 text-white rounded" onclick={`import('/src/components/inventario/inventario-modal.js').then(m => m.openNewModal())`}>Nuevo</button>
  </div>
</div>


<script type="module" src="/src/components/inventario/inventario-modal.js"></script>

<div class="overflow-x-auto rounded-lg border">
  <table class="border-collapse border border-gray-300 w-full">
    <thead>
      <tr>
        <th class="border border-gray-300">CODIGO</th>
        <th class="border border-gray-300">NOMBRE</th>
        <th class="border border-gray-300">CATEGORIA</th>
        <th class="border border-gray-300">UNIDAD DE MEDIDA</th>
        <th class="border border-gray-300">
          <a href={`?${new URLSearchParams({
            tipo, sede, search, searchBy, categoria: categoriaFiltro, page: '1',
            sortBy: 'cantidad', sortDir: sortBy === 'cantidad' && sortDir === 'desc' ? 'asc' : 'desc'
          }).toString()}`}
            class="flex items-center gap-1 hover:underline">
            CANTIDAD
            <span class="inline-block w-4 h-4 align-middle">
              {sortBy === 'cantidad' ? (
                sortDir === 'desc' ? (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 9 10 14 15 9"/></svg>
                ) : (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 11 10 6 15 11"/></svg>
                )
              ) : (
                <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-gray-300"><polyline points="5 11 10 6 15 11"/></svg>
              )}
            </span>
          </a>
        </th>
        <th class="border border-gray-300">
          <a href={`?${new URLSearchParams({
            tipo, sede, search, searchBy, categoria: categoriaFiltro, page: '1',
            sortBy: 'valor_unitario', sortDir: sortBy === 'valor_unitario' && sortDir === 'desc' ? 'asc' : 'desc'
          }).toString()}`}
            class="flex items-center gap-1 hover:underline">
            VALOR UNITARIO
            <span class="inline-block w-4 h-4 align-middle">
              {sortBy === 'valor_unitario' ? (
                sortDir === 'desc' ? (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 9 10 14 15 9"/></svg>
                ) : (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 11 10 6 15 11"/></svg>
                )
              ) : (
                <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-gray-300"><polyline points="5 11 10 6 15 11"/></svg>
              )}
            </span>
          </a>
        </th>
        <th class="border border-gray-300">
          <a href={`?${new URLSearchParams({
            tipo, sede, search, searchBy, categoria: categoriaFiltro, page: '1',
            sortBy: 'subtotal', sortDir: sortBy === 'subtotal' && sortDir === 'desc' ? 'asc' : 'desc'
          }).toString()}`}
            class="flex items-center gap-1 hover:underline">
            SUBTOTAL
            <span class="inline-block w-4 h-4 align-middle">
              {sortBy === 'subtotal' ? (
                sortDir === 'desc' ? (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 9 10 14 15 9"/></svg>
                ) : (
                  <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-blue-600"><polyline points="5 11 10 6 15 11"/></svg>
                )
              ) : (
                <svg viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" class="w-4 h-4 text-gray-300"><polyline points="5 11 10 6 15 11"/></svg>
              )}
            </span>
          </a>
        </th>
        {role === 'admin' && (
          <th colspan="4" class="border border-gray-300">ACCION</th>
        )}
        {role === 'logistics' && (
          <th colspan="2" class="border border-gray-300">ACCION</th>
        )}
      </tr>
    </thead>

    <tbody>
      {
        paginatedRows.length === 0 ? (
          <tr>
            <td colspan="10" class="border p-4 text-center text-slate-500">
              No hay registros en {tipo}.
            </td>
          </tr>
        ) : (
          paginatedRows.map((r: any) => (
            <tr class="hover:bg-slate-50">
              <td class="border p-2">{r.codigo}</td>
              <td class="border p-2">{r.nombre}</td>
              <td class="border p-2">{r.categoria ?? "-"}</td>
              <td class="border p-2">{r.unid_med ?? "-"}</td>
              <td class="border p-2 text-right">{Number(r.cantidad ?? 0)}</td>
              <td class="border p-2 text-right">{money(r.valor_unitario)}</td>
              <td class="border p-2 text-right">{money(subtotal(r))}</td>
                {role === 'admin' && (
              <td class="border p-2 text-center">
                  <button
                  class="underline text-blue-600"
                  onclick={`import('/src/components/inventario/inventario-modal.js').then(m => m.openEditModal(${JSON.stringify({ ...r, tipo, sede })}))`}
                >
                  Editar
                </button>
              </td>
              <td class="border p-2 text-center">
                <button
                  class="underline text-red-600"
                  onclick={`import('/src/components/inventario/inventario-modal.js').then(m => m.openDeleteModal(${JSON.stringify({ ...r, tipo })}))`}
                >
                  Eliminar
                </button>
              </td>
                )}
                

              <td class="border p-2 text-center">
                <button
                  class="underline text-cyan-600"
                  onclick={`import('/src/components/inventario/inventario-modal.js').then(m => m.openAddModal(${JSON.stringify({ ...r, tipo, sede })}))`}
                >
                  Agregar
                </button>
              </td>
              <td class="border p-2 text-center">
                <button
                  class="underline text-green-700"
                  type="button"
                  onclick={`import('/src/components/inventario/inventario-modal.js').then(m => m.openTransferModal(${JSON.stringify({ ...r, tipo, sede })}))`}
                >
                  Transferir
                </button>
              </td>
            </tr>
          ))
        )
      }
    </tbody>
  </table>
</div>

<!-- Paginación -->
  {
    totalPages > 1 && (
      <div class="flex justify-center items-center gap-2 mt-4">
        {/* Mostrar 'Anterior' solo si no estamos en la primera página */}
        {page > 1 && (
          <a
            href={`?tipo=${tipo}&sede=${sede}&search=${encodeURIComponent(search)}&searchBy=${searchBy}&categoria=${categoriaFiltro}&page=${page - 1}`}
            class="px-3 py-1 rounded border bg-white hover:bg-slate-50"
          >
            Anterior
          </a>
        )}
        {/* Siempre mostrar la primera página */}
        <a
          href={`?tipo=${tipo}&sede=${sede}&search=${encodeURIComponent(search)}&searchBy=${searchBy}&categoria=${categoriaFiltro}&page=1`}
          class={`px-3 py-1 rounded border ${page === 1 ? "bg-slate-900 text-white" : "bg-white hover:bg-slate-50"}`}
        >
          1
        </a>
        {/* Mostrar ... si la página actual está lejos del inicio */}
        {page > 3 && totalPages > 5 && <span class="px-2">...</span>}
        {/* Mostrar páginas alrededor de la actual */}
        {Array.from({ length: totalPages }, (_, i) => i + 1)
          .filter((i) => i !== 1 && i !== totalPages && Math.abs(i - page) <= 1)
          .map((i) => (
            <a
              href={`?tipo=${tipo}&sede=${sede}&search=${encodeURIComponent(search)}&searchBy=${searchBy}&categoria=${categoriaFiltro}&page=${i}`}
              class={`px-3 py-1 rounded border ${page === i ? "bg-slate-900 text-white" : "bg-white hover:bg-slate-50"}`}
            >
              {i}
            </a>
          ))}
        {/* Mostrar ... si la página actual está lejos del final */}
        {page < totalPages - 2 && totalPages > 5 && (
          <span class="px-2">...</span>
        )}
        {/* Siempre mostrar la última página si hay más de una */}
        {totalPages > 1 && (
          <a
            href={`?tipo=${tipo}&sede=${sede}&search=${encodeURIComponent(search)}&searchBy=${searchBy}&categoria=${categoriaFiltro}&page=${totalPages}`}
            class={`px-3 py-1 rounded border ${page === totalPages ? "bg-slate-900 text-white" : "bg-white hover:bg-slate-50"}`}
          >
            {totalPages}
          </a>
        )}
        {/* Mostrar 'Siguiente' solo si no estamos en la última página */}
        {page < totalPages && (
          <a
            href={`?tipo=${tipo}&sede=${sede}&search=${encodeURIComponent(search)}&searchBy=${searchBy}&categoria=${categoriaFiltro}&page=${page + 1}`}
            class="px-3 py-1 rounded border bg-white hover:bg-slate-50"
          >
            Siguiente
          </a>
        )}
      </div>
    )
  }

<!-- Modales fuera del contenedor de la tabla -->
<div id="transfer-modal" class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 hidden animate-fade-in">
  <form method="POST" class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border-2 border-green-400 relative animate-fade-in" onsubmit="import('/src/components/inventario/inventario-modal.js').then(m => m.submitTransferForm(event))">
    <div class="modal-success"></div>
    <h2 class="text-xl font-bold mb-4 text-green-700 text-center">Transferir Inventario</h2>
    <input type="hidden" id="transfer-id" name="transfer-id" />
    <input type="hidden" id="transfer-tipo" name="transfer-tipo" />
    <input type="hidden" id="transfer-sede-origen" name="transfer-sede-origen" />
    <input type="hidden" id="transfer-categoria" name="transfer-categoria" />
    <input type="hidden" id="transfer-unid_med" name="transfer-unid_med" />
    <input type="hidden" id="transfer-valor_unitario" name="transfer-valor_unitario" />
    <input type="hidden" id="transfer-codigo" name="transfer-codigo" />
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Nombre</label>
      <input type="text" id="transfer-nombre" name="transfer-nombre" class="border w-full rounded px-2 py-1 bg-gray-100" readonly />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Cantidad a transferir</label>
      <input type="number" id="transfer-cantidad" name="transfer-cantidad" class="border w-full rounded px-2 py-1" min="1" required />
    </div>
    <!-- Nuevo campo: ¿A dónde desea transferir? -->
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">¿A dónde desea transferir?</label>
      <select id="transfer-destino-tipo" name="transfer-destino-tipo" class="border w-full rounded px-2 py-1" required onchange="
        document.getElementById('transfer-almacen-destino').style.display = this.value === 'almacen' ? 'block' : 'none';
        document.getElementById('transfer-centro-costo-destino').style.display = this.value === 'centro_costo' ? 'block' : 'none';
        document.getElementById('transfer-site').style.display = this.value === 'site' ? 'block' : 'none';
      ">
        <option value="">Seleccione una opción</option>
        <option value="almacen">Almacén</option>
        <option value="centro_costo">Centro de Costo</option>
        <option value="site">Site</option>
      </select>
    </div>
    <!-- Selección de almacén destino -->
    <div class="mb-3" id="transfer-almacen-destino" style="display:none">
      <label class="block text-sm font-semibold mb-1">Almacén destino</label>
      <select id="transfer-sede-destino" name="transfer-sede-destino" class="border w-full rounded px-2 py-1">
        <option value="">Selecciona un almacén</option>
        <option value="surco">Surco</option>
        <option value="cusco">Cusco</option>
      </select>
    </div>
    <!-- Selección de centro de costo destino -->
    <div class="mb-3" id="transfer-centro-costo-destino" style="display:none">
      <label class="block text-sm font-semibold mb-1">Centro de Costo destino</label>
      <select id="transfer-centro-costo" name="transfer-centro-costo" class="border w-full rounded px-2 py-1">
        <option value="">Selecciona un centro de costo</option>
        {centrosCostos.map(cc => (
          <option value={cc.codigo} data-proyecto={cc.proyecto}>{cc.codigo} - {cc.proyecto}</option>
        ))}
      </select>
    </div>
    <!-- Selección de site destino -->
    <div class="mb-3" id="transfer-site" style="display:none">
      <label class="block text-sm font-semibold mb-1">Site destino</label>
      <select id="transfer-site" name="transfer-site" class="border w-full rounded px-2 py-1">
        <option value="">Selecciona un site</option>
        {nombresUnicos.map((nombreUnico, idx) => {
          const site = sites.find(s => s.nombre === nombreUnico);
          return site ? (
            <option value={site.id} data-site={site.nombre}>{site.id} - {site.nombre}</option>
          ) : null;
        })}
      </select>
    </div>

<div class="mb-3" id="transfer-site-centro-costo" style="display:none">
  <label class="block text-sm font-semibold mb-1">Centro de Costo asociado</label>
  <select id="select-centro-costo" name="select-centro-costo" class="border w-full rounded px-2 py-1">
    <option value="">Selecciona un centro de costo</option>
    {/* Las opciones se llenarán dinámicamente */}
  </select>
</div>

<script type="module">
  // Suponiendo que tienes sitesData disponible como array de objetos
  const transferSiteSelect = document.getElementById('transfer-site');
  const centroCostoDiv = document.getElementById('transfer-site-centro-costo');
  const centroCostoSelect = document.getElementById('select-centro-costo');

  transferSiteSelect?.addEventListener('change', function () {
    const selectedSiteId = this.value;
    const selectedSite = sitesData.find(s => String(s.nombre) === selectedSelectedSite);
    if (!selectedSite) {
      centroCostoDiv.style.display = 'none';
      return;
    }
    // Filtra todos los sites con el mismo nombre
    const sitesMismoNombre = sitesData.filter(s => s.nombre === selectedSite.nombre);
    // Obtén los cc_origen únicos
    const ccUnicos = Array.from(new Set(sitesMismoNombre.map(s => s.cc_origen)));
    if (ccUnicos.length > 1) {
      centroCostoDiv.style.display = 'block';
      centroCostoSelect.innerHTML = '<option value=\"\">Selecciona un centro de costo</option>';
      ccUnicos.forEach(cc => {
        centroCostoSelect.innerHTML += `<option value=\"${cc}\">${cc}</option>`;
      });
    } else {
      centroCostoDiv.style.display = 'none';
    }
  });
</script>

    
<!-- Fin selección de site destino -->
    <div class="flex gap-2 justify-end mt-6">
      <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="import('/src/components/inventario/inventario-modal.js').then(m => m.closeModal('transfer-modal'))">Cancelar</button>
      <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">Confirmar traslado</button>
    </div>
  </form>
</div>

<!-- Modal Editar -->
<div id="edit-modal" class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 hidden animate-fade-in">
  <form method="POST" class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border-2 border-blue-400 relative animate-fade-in" onsubmit="import('/src/components/inventario/inventario-modal.js').then(m => m.submitEditForm(event))">
    <div class="modal-success"></div>
    <h2 class="text-xl font-bold mb-4 text-blue-700 text-center">Editar Inventario</h2>
    <input type="hidden" id="edit-id" name="edit-id"/>
    <input type="hidden" id="edit-tipo" name="edit-tipo" />
    <input type="hidden" id="edit-sede" name="edit-sede" />
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Código</label>
      <input type="text" id="edit-codigo" name="edit-codigo" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300" required />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Nombre</label>
      <input type="text" id="edit-nombre" name="edit-nombre" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300" required />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Categoría</label>
      <input type="text" id="edit-categoria" name="edit-categoria" class="border w-full rounded px-2 py-1" />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Unidad de Medida</label>
      <input type="text" id="edit-unid_med" name="edit-unid_med" class="border w-full rounded px-2 py-1" />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Cantidad</label>
      <input type="number" id="edit-cantidad" name="edit-cantidad" class="border w-full rounded px-2 py-1" min="0" step="1" required />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Valor Unitario</label>
      <input type="number" id="edit-valor_unitario" name="edit-valor_unitario" class="border w-full rounded px-2 py-1" min="0" step="0.0001" required />
    </div>
    <div class="flex gap-2 justify-end mt-6">
      <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="import('/src/components/inventario/inventario-modal.js').then(m => m.closeModal('edit-modal'))">Cancelar</button>
      <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Guardar</button>
    </div>
  </form>
</div>

<!-- Modal Agregar -->
<div id="add-modal" class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 hidden animate-fade-in">
  <form method="POST" class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border-2 border-blue-400 relative animate-fade-in" onsubmit="import('/src/components/inventario/inventario-modal.js').then(m => m.submitAddForm(event))">
    <div class="modal-success"></div>
    <h2 class="text-xl font-bold mb-4 text-blue-700 text-center">Agregar Inventario</h2>
    <input type="hidden" id="add-id" name="add-id"/>
    <input type="hidden" id="add-tipo" name="add-tipo" />
    <input type="hidden" id="add-sede" name="add-sede" />
    <input type="hidden" id="add-valor-unitario" name="add-valor-unitario" />
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Código</label>
      <input disabled type="text" id="add-codigo" name="add-codigo" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300"/>
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Nombre</label>
      <textarea disabled id="add-nombre" name="add-nombre" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300"></textarea>
    </div>
    
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Cantidad</label>
      <input type="number" id="add-cantidad" name="add-cantidad" class="border w-full rounded px-2 py-1" min="0" step="1" required />
    </div>

    <div class="flex gap-2 justify-end mt-6">
      <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="import('/src/components/inventario/inventario-modal.js').then(m => m.closeModal('add-modal'))">Cancelar</button>
      <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Guardar</button>
    </div>
  </form>
</div>

<!-- Modal Eliminar -->
<div id="delete-modal" class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 hidden animate-fade-in">
  <form method="POST" class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border-2 border-red-400 relative animate-fade-in" onsubmit="import('/src/components/inventario/inventario-modal.js').then(m => m.submitDeleteForm(event))">
    <div class="modal-success"></div>
    <input type="hidden" id="delete-id" name="delete-id" />
    <input type="hidden" id="delete-tipo" name="delete-tipo" value={tipo} />
    <input type="hidden" id="delete-sede" name="delete-sede" value={sede} />
    <h2 class="text-xl font-bold mb-4 text-red-700 text-center">¿Seguro que deseas eliminar <span id="delete-nombre" class="font-semibold"></span>?</h2>
    <div class="flex gap-2 justify-end mt-6">
      <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="import('/src/components/inventario/inventario-modal.js').then(m => m.closeModal('delete-modal'))">Cancelar</button>
      <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Eliminar</button>
    </div>
  </form>
</div>

<!-- Modal nuevo -->
<div id= "new-modal" class="fixed inset-0 bg-black/40 flex items-center justify-center z-50 animate-fade-in hidden">
  <form method="POST" class="bg-white p-8 rounded-2xl shadow-2xl w-full max-w-lg border-2 border-blue-400 relative animate-fade-in" onsubmit="import('/src/components/inventario/inventario-modal.js').then(m => m.submitNewForm(event))">
    <h2 class="text-xl font-bold mb-4 text-blue-700 text-center">Nuevo Inventario</h2>
    <input type="hidden" id="sede" name="sede" value={sede} />
    <input type="hidden" id="tipo" name="tipo" value={tipo} />
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Código</label>
      <input id="new-codigo" type="text" name="codigo" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300" required placeholder="Por ejemplo: ALC-001" value={valoresIniciales.codigo ?? ""} />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Nombre</label>
      <input id="new-nombre" type="text" name="nombre" class="border w-full rounded px-2 py-1 focus:ring-2 focus:ring-blue-300" required value={valoresIniciales.nombre ?? ""} />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Categoría</label>
      <select id="new-categoria" name="categoria" class="border w-full rounded px-2 py-1"
        onchange="if(this.value==='otro'){document.getElementById('nueva-categoria').style.display='block'}else{document.getElementById('nueva-categoria').style.display='none'}; this.options[0].hidden = true;"
        required>
        <option value="" selected={!categoria}>--Seleccione una opción--</option>
        {categoriasUnicas.map(cat => <option value={cat} selected={categoria === cat}>{cat}</option>)}
        <option value="otro">Otro...</option>
      </select>
      <input type="text" id="nueva-categoria" name="nueva-categoria" class="border w-full rounded px-2 py-1 mt-2" style="display:none" placeholder="Nueva categoría" />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Unidad de Medida</label>
      <select id="new-unid_med" name="unid_med" class="border w-full rounded px-2 py-1"
        onchange="if(this.value==='otro'){document.getElementById('nueva-unidad').style.display='block'}else{document.getElementById('nueva-unidad').style.display='none'}; this.options[0].hidden = true;"
        required>
        <option value="" selected={!unid_med}>--Seleccione una opción--</option>
        {Array.from(new Set(rows.map(r => r.unid_med || ""))).filter(u => u).map(u => (
          <option value={u} selected={unid_med === u}>{u}</option>
        ))}
        <option value="otro">Otro...</option>
      </select>
      <input type="text" id="nueva-unidad" name="nueva-unidad" class="border w-full rounded px-2 py-1 mt-2" style="display:none" placeholder="Nueva unidad de medida" />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Cantidad</label>
      <input id="new-cantidad" type="number" name="cantidad" class="border w-full rounded px-2 py-1" min="0" step="1" required value={valoresIniciales.cantidad ?? ""} />
    </div>
    <div class="mb-3">
      <label class="block text-sm font-semibold mb-1">Valor Unitario</label>
      <input id="new-valor_unitario" type="number" name="valor_unitario" class="border w-full rounded px-2 py-1" min="0" step="0.01" required value={valoresIniciales.valor_unitario ?? ""} />
    </div>
    <div class="flex gap-2 justify-end mt-6">
      <button type="button" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400" onclick="import('/src/components/inventario/inventario-modal.js').then(m => m.closeModal('new-modal'))">Cancelar</button>
      <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">{modo === "nuevo" ? "Crear" : "Guardar"}</button>
    </div>
  </form>
</div>

<style>
@keyframes fade-in {
  from { opacity: 0; transform: scale(0.97); }
  to { opacity: 1; transform: scale(1); }
}
.animate-fade-in {
  animation: fade-in 0.3s ease;
}
</style>
